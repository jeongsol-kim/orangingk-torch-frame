"Module for recording experimental result"

import shutil
from pathlib import Path
from datetime import datetime
from typing import Dict, Union
import yaml

import matplotlib.pyplot as plt
import torch
from torchvision.utils import make_grid

def get_time() -> str:
    """Return current time.

    Args:

    Returns:
        str: current time form of Month-Date_Hour_Min_Sec.
    """
    return datetime.today().strftime("%h%d_%H%M%S")

def create_exp_dir(work_dir: Union[Path, str]) -> Path:
    """Create experiment directory and return the path.

    Args:
        work_dir (Union[Path, str]): working directory that contains exp directories.

    Returns:
        Path: created experiment directory
    """
    if isinstance(work_dir, str):
        work_dir = Path(work_dir)
    
    work_dir.mkdir(exist_ok=True)
    exp_dir = work_dir.joinpath(f'EXP_{get_time()}')
    exp_dir.mkdir()
    return exp_dir

def save_exp_condition(work_dir: Path, condition: Dict) -> None:
    """Save experimental conditions as yaml file.

    Args:
        work_dir (Path): Save directory. Common choice is the experimental directory.
        condition (Dict): Experimental conditions recorded as dictionary.

    Returns:
        None:
    """
    with open(work_dir.joinpath('exp_condition.yaml'), 'w') as f:
        yaml.dump(condition, f)


def save_grid_img(tensor: torch.Tensor,
                  file_path: Path,
                  **kwargs) -> None:
    """Save grid image generated by torchvision.utils.make_grid.
    Arguments are transfered to make_grid() so you can use all options.
    For one channel tensor, default colormap is gray, but you can choose it by giving 'cmap'.

    Args:
        tensor (torch.Tensor): input image tensor of shape (B, C, H, W).
        file_path (Path): save file path including file name.
        kwargs:

    Returns:
        None:
    """
    assert isinstance(tensor, torch.Tensor)

    grid = make_grid(tensor, **kwargs)
    cmap = kwargs.get('cmap', 'gray')

    if tensor.shape[1] == 1:  # one channel image
        plt.imsave(file_path, grid[0,:,:], cmap=cmap)
    else:
        plt.imsave(file_path, grid)

def clean_work_dir(work_dir: Union[Path, str], default_len: int=2) -> None:
    """Check and remove last crated directory in work_dir if it does not contain useful results.

    Args:
        work_dir (Union[Path, str]): work directory
        default_len (int): number of default files
    """
    
    if isinstance(work_dir, str):
        work_dir = Path(work_dir)

    subdirs = [sd for sd in work_dir.iterdir() if sd.is_dir()]
    sorted_by_birth = sorted(subdirs, key=lambda x: x.stat().st_mtime)
    last_dir = sorted_by_birth[-1]

    if len(list(last_dir.glob('**/*'))) == default_len:
        # which means that the directory has nothing useful.
        shutil.rmtree(last_dir)

